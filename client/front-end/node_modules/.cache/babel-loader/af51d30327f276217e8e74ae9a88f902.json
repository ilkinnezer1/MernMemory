{"ast":null,"code":"var _jsxFileName = \"/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/components/Nav Panel/Navbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./Nav-panel.css\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from 'react-redux';\nimport decode from \"jwt-decode\";\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Avatar from 'react-avatar';\nimport { Button, Container } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Navbar = () => {\n  _s();\n\n  var _mockUser$result, _mockUser$result2, _mockUser$result3, _mockUser$result4;\n\n  const [mockUser, setMockUser] = useState(JSON.parse(localStorage.getItem(\"profile\")));\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleLogOut = () => {\n    dispatch({\n      type: \"LOGOUT\"\n    });\n    history.push('/auth');\n    setMockUser(null);\n  };\n\n  useEffect(() => {\n    const token = mockUser === null || mockUser === void 0 ? void 0 : mockUser.token;\n\n    if (token) {\n      const decodedToken = decode(token);\n      if (decodedToken.exp * 1000 < new Date().getTime()) handleLogOut();\n    }\n\n    setMockUser(JSON.parse(localStorage.getItem(\"profile\")));\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \" navbar navbar-light bg-light d-flex justify-content-between\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-brand\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"SPI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: (mockUser === null || mockUser === void 0 ? void 0 : mockUser.result) ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"other\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"other\",\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              color: Avatar.getRandomColor('sitebase', ['red', 'green', 'blue', 'gray', 'white', 'black']),\n              name: (_mockUser$result = mockUser.result) === null || _mockUser$result === void 0 ? void 0 : _mockUser$result.name,\n              round: true,\n              size: \"40\",\n              src: (_mockUser$result2 = mockUser.result) === null || _mockUser$result2 === void 0 ? void 0 : _mockUser$result2.imageUrl,\n              textSizeRatio: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"black\",\n                marginLeft: \"5px\",\n                marginRight: \"5px\"\n              },\n              children: (_mockUser$result3 = mockUser.result) === null || _mockUser$result3 === void 0 ? void 0 : _mockUser$result3.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-name\",\n              children: (_mockUser$result4 = mockUser.result) === null || _mockUser$result4 === void 0 ? void 0 : _mockUser$result4.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"danger\",\n            onClick: handleLogOut,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/auth\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"success\",\n              children: \"Sign in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Navbar, \"0ioJLwzFUthVQlq0ttcbnvqOyKM=\", false, function () {\n  return [useDispatch, useHistory, useLocation];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/components/Nav Panel/Navbar.js"],"names":["React","useEffect","useState","Link","useDispatch","decode","useHistory","useLocation","Avatar","Button","Container","Navbar","mockUser","setMockUser","JSON","parse","localStorage","getItem","dispatch","history","location","handleLogOut","type","push","token","decodedToken","exp","Date","getTime","result","getRandomColor","name","imageUrl","color","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport \"./Nav-panel.css\" \nimport {Link} from \"react-router-dom\"\nimport { useDispatch } from 'react-redux'\nimport decode from \"jwt-decode\"\nimport { useHistory, useLocation } from 'react-router-dom'\nimport Avatar from 'react-avatar'\nimport {Button,Container} from \"reactstrap\"\n\n\n\nconst Navbar = () =>  {\n\nconst [mockUser, setMockUser] = useState(JSON.parse(localStorage.getItem(\"profile\")))\nconst dispatch = useDispatch()\nconst history = useHistory()\nconst location = useLocation()\n\n       const handleLogOut = () => { \n          dispatch({type:\"LOGOUT\"})\n            history.push('/auth')\n               setMockUser(null)\n            }\n\n            useEffect(()=> {\n                const token = mockUser?.token\n                if(token){\n                    const decodedToken = decode(token)\n                    if(decodedToken.exp * 1000 < new Date().getTime()) handleLogOut()\n                }\n                setMockUser(JSON.parse(localStorage.getItem(\"profile\")))\n            }, [location])\n\n         \n\n    return (\n        <nav className=\" navbar navbar-light bg-light d-flex justify-content-between\">\n            <Container>\n            <div className=\"navbar-brand\">\n            <Link to=\"/\">\n                  SPI\n          </Link>\n              </div>\n         <div>\n                {mockUser?.result ? (\n                    <div className=\"other\">\n                        <div className=\"other\">\n                        <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue', 'gray', 'white','black'])}\n                        name={mockUser.result?.name}\n                        round \n                        size=\"40\" \n                        src={mockUser.result?.imageUrl}\n                        textSizeRatio={2}/>\n                            <span style={{color: \"black\",  marginLeft: \"5px\", marginRight: \"5px\"}}>{mockUser.result?.name}</span>\n                        <div className=\"user-name\">{mockUser.result?.name}</div>\n                        </div>\n                        <Button color=\"danger\" onClick={handleLogOut}>Logout</Button>\n                    </div>\n                ) : (\n                    <div>\n                    <Link to=\"/auth\">\n                      <Button color=\"success\">Sign in</Button>\n                    </Link>\n                    </div>\n                )}\n         </div>\n         </Container>\n        </nav>\n    )\n}\n\nexport default Navbar\n"]},"metadata":{},"sourceType":"module"}