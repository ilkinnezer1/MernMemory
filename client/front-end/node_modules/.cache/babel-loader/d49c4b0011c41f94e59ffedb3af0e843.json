{"ast":null,"code":"import { fetchPosts, createPost, updatePost, deletePost, likePost, fetchPostsBySearch, fetchSinglePost } from \"../../Api/api\"; //Sending data to reducer with different functions\n//THAT helps to reach data in reducer\n\nconst getPost = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await fetchPosts();\n    dispatch({\n      type: \"FETCH_ALL\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default getPost; //Fetching single post \n\nexport const getSinglePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await fetchSinglePost(id);\n    dispatch({\n      type: \"FETCH_SINGLE_POST\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostbySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await fetchPostsBySearch(searchQuery);\n    console.log(data);\n    dispatch({\n      type: \"SEARCH_ALL\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //That makes new post to add database and also REDUX state\n\nexport const createNewPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await createPost(post);\n    dispatch({\n      type: \"CREATE_POST\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //UPDATING new post and it has 2 paraneters \n//First parameter is the specific ID and second received data\n\nexport const updateNewPost = (id, receivedPostData) => async dispatch => {\n  try {\n    const {\n      data\n    } = await updatePost(id, receivedPostData);\n    dispatch({\n      type: \"UPDATE_POST\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //Deleting post to send request backend. It also sends request to database to delete specific post from cluster\n\nexport const deleteThePost = id => async dispatch => {\n  try {\n    await deletePost(id);\n    dispatch({\n      type: \"DELETE\",\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; //UPDATING LIKE BUTTON and after will add the authentication with JWT to make reacheable for everyone to add their like\n\nexport const likeNewPost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await likePost(id);\n    dispatch({\n      type: \"LIKE_POST\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/REDUX/action/action.js"],"names":["fetchPosts","createPost","updatePost","deletePost","likePost","fetchPostsBySearch","fetchSinglePost","getPost","dispatch","data","type","payload","error","console","log","getSinglePost","id","message","getPostbySearch","searchQuery","createNewPost","post","updateNewPost","receivedPostData","deleteThePost","likeNewPost"],"mappings":"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","sourcesContent":["import {fetchPosts,\n         createPost, \n         updatePost, \n         deletePost, \n         likePost,\n         fetchPostsBySearch,\n         fetchSinglePost} from \"../../Api/api\"\n         //Sending data to reducer with different functions\n         //THAT helps to reach data in reducer\n const getPost = () => async (dispatch) =>  {\n    try{\n        const {data} = await fetchPosts()\n        dispatch({type: \"FETCH_ALL\" , payload: data})\n    }catch(error){\n        console.log(error)\n    }\n}\nexport default getPost\n//Fetching single post \nexport const getSinglePost = (id) => async (dispatch) => {\n    try{\n        const {data} = await fetchSinglePost(id)\n        dispatch({type: \"FETCH_SINGLE_POST\", payload: data})\n    }catch(error){\n        console.log(error.message)\n    }\n}\n\nexport const getPostbySearch = (searchQuery) => async (dispatch) => {\n    try {\n        const {data:{data}} = await fetchPostsBySearch(searchQuery)\n        console.log(data)\n        dispatch({type: \"SEARCH_ALL\" , payload: data})\n    } catch (error) {\n        console.log(error.message)\n    }\n}\n\n//That makes new post to add database and also REDUX state\nexport const createNewPost = (post) => async (dispatch) => {\n    try{\n        const {data} = await createPost(post);\n        dispatch({type: \"CREATE_POST\",  payload: data})\n    }catch(error){\n        console.log(error)\n    }\n}\n\n//UPDATING new post and it has 2 paraneters \n//First parameter is the specific ID and second received data\nexport const updateNewPost = (id, receivedPostData) => async (dispatch) => {\n    try{\n      const {data}  =  await updatePost(id, receivedPostData)\n      dispatch({type: \"UPDATE_POST\", payload: data})\n    } catch(error){\n        console.log(error)\n    }\n}\n//Deleting post to send request backend. It also sends request to database to delete specific post from cluster\nexport const deleteThePost = (id) =>  async (dispatch) => {\n    try{\n        await deletePost(id)\n        dispatch({type: \"DELETE\" , payload: id})\n    }catch(error){\n        console.log(error)\n    }\n}\n//UPDATING LIKE BUTTON and after will add the authentication with JWT to make reacheable for everyone to add their like\nexport const likeNewPost = (id) => async (dispatch) => {\n    try {\n        const {data} = await likePost(id)\n        dispatch({type:\"LIKE_POST\",  payload: data})\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}