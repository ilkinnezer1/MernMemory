{"ast":null,"code":"//IDENTIFIES WHERE DATA STORES\nconst initialValue = {\n  posts: []\n};\nexport default function posts(state = initialValue, action) {\n  switch (action.type) {\n    case \"FETCH_SINGLE_POST\":\n      return { ...state,\n        post: action.payload\n      };\n\n    case \"SEARCH_ALL\":\n      return state = action.payload;\n\n    case \"LIKE_POST\":\n      return state.map(post => post._id === action.payload._id ? action.payload : post);\n    // that will send data to state posts\n\n    case \"DELETE\":\n      return state.filter(post => post._id !== action.payload);\n    // Checking the identity of id of single posts and attach to update posts\n\n    case \"UPDATE_POST\":\n      return state.map(post => post._id === action.payload._id ? action.payload : post);\n    //Checking the similarity of posts's id coming from backend \n\n    case \"FETCH_ALL\":\n      return state = action.payload;\n    //takes data and sends to store\n\n    case \"CREATE_POST\":\n      return [...state, action.payload];\n    //spreads data and take the specific data coming from backend\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/REDUX/reducers/reducers.js"],"names":["initialValue","posts","state","action","type","post","payload","map","_id","filter"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,eAAe,SAASA,KAAT,CAAgBC,KAAK,GAACF,YAAtB,EAAoCG,MAApC,EAA2C;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,mBAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWG,QAAAA,IAAI,EAACF,MAAM,CAACG;AAAvB,OAAP;;AACJ,SAAK,YAAL;AACI,aAAOJ,KAAK,GAACC,MAAM,CAACG,OAApB;;AACJ,SAAK,WAAL;AACA,aAAOJ,KAAK,CAACK,GAAN,CAAWF,IAAD,IAAUA,IAAI,CAACG,GAAL,KAAaL,MAAM,CAACG,OAAP,CAAeE,GAA5B,GAAkCL,MAAM,CAACG,OAAzC,GAAmDD,IAAvE,CAAP;AAAoF;;AACpF,SAAK,QAAL;AACI,aAAOH,KAAK,CAACO,MAAN,CAAaJ,IAAI,IAAIA,IAAI,CAACG,GAAL,KAAaL,MAAM,CAACG,OAAzC,CAAP;AAAyD;;AAC7D,SAAK,aAAL;AACI,aAAOJ,KAAK,CAACK,GAAN,CAAWF,IAAD,IAASA,IAAI,CAACG,GAAL,KAAaL,MAAM,CAACG,OAAP,CAAeE,GAA5B,GAAkCL,MAAM,CAACG,OAAzC,GAAmDD,IAAtE,CAAP;AAAmF;;AACvF,SAAK,WAAL;AACF,aAAOH,KAAK,GAAGC,MAAM,CAACG,OAAtB;AAA+B;;AAC7B,SAAK,aAAL;AACI,aAAO,CAAC,GAAGJ,KAAJ,EAAYC,MAAM,CAACG,OAAnB,CAAP;AAAoC;;AACxC;AAAS,aAAOJ,KAAP;AAfb;AAiBH","sourcesContent":["//IDENTIFIES WHERE DATA STORES\nconst initialValue = {\n    posts: []\n}\n\nexport default function posts (state=initialValue, action){\n    switch (action.type){\n        case \"FETCH_SINGLE_POST\":\n            return {...state, post:action.payload}\n        case \"SEARCH_ALL\":\n            return state=action.payload\n        case \"LIKE_POST\": \n        return state.map((post) => post._id === action.payload._id ? action.payload : post )// that will send data to state posts\n        case \"DELETE\" :\n            return state.filter(post => post._id !== action.payload) // Checking the identity of id of single posts and attach to update posts\n        case \"UPDATE_POST\" :\n            return state.map((post)=> post._id === action.payload._id ? action.payload : post) //Checking the similarity of posts's id coming from backend \n        case \"FETCH_ALL\": \n      return state = action.payload; //takes data and sends to store\n        case \"CREATE_POST\" :\n            return [...state,  action.payload]; //spreads data and take the specific data coming from backend\n        default: return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}