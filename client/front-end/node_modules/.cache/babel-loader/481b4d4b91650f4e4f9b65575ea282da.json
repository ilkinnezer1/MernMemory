{"ast":null,"code":"var _jsxFileName = \"/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/components/Form/forms.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Label, FormText, FormGroup, Input, Button } from \"reactstrap\";\nimport FileBase from \"react-file-base64\";\nimport { createNewPost, updateNewPost } from '../../REDUX/action/action';\nimport \"./form.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormElements = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  // UseState Hook that defines our  database collection and take its value also control\n  const selector = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null);\n  const [inputData, setInputData] = useState({\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem(\"profile\")); // HandleSubmit will send data received from form elements to backEnd\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createNewPost({ ...inputData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n    } else {\n      dispatch(updateNewPost(currentId, inputData));\n    }\n\n    clearText(); //After clicking the any button, it will clear input value\n  }; //Here we will make work selector another name is single post we take and check the similarity of id of single post\n\n\n  useEffect(() => {\n    if (selector) {\n      setInputData(selector);\n    }\n  }, [selector]); //Clearing the text when we cancel\n\n  const clearText = () => {\n    setCurrentId(null);\n    setInputData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  }; //Creating form elements and adding select file function by FileBase\n  // Controlling its value and submit all data for sending to the database\n\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"main-form d-flex\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: \"header-text bg bg-dark p-2 mb-3\",\n      children: /*#__PURE__*/_jsxDEV(FormText, {\n        color: \"light\",\n        children: currentId ? \"Edit your impression\" : \"Create your short impression\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      className: \"mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        className: \"mb-2\",\n        for: \"title\",\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        required: true,\n        autoComplete: \"off\",\n        type: \"text\",\n        name: \"title\",\n        id: \"title\",\n        placeholder: \"title...\",\n        value: inputData.title,\n        onChange: e => setInputData({ ...inputData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      className: \"mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        className: \"mb-2\",\n        for: \"title\",\n        children: \"Tags\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        required: true,\n        type: \"text\",\n        name: \"tags\",\n        id: \"tags\",\n        placeholder: \"to your friends\",\n        value: inputData.tags,\n        onChange: e => setInputData({ ...inputData,\n          tags: e.target.value.split(',')\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      className: \"mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        className: \"mb-2\",\n        for: \"message\",\n        children: \"Your impression\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"textarea\",\n        name: \"text\",\n        id: \"text\",\n        placeholder: \"share your impression...\",\n        className: \"text-area\",\n        cols: \"30\",\n        rows: \"5\",\n        value: inputData.message,\n        onChange: e => setInputData({ ...inputData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FileBase, {\n      className: \"selected-file\",\n      type: \"file\",\n      multiple: false,\n      onDone: ({\n        base64\n      }) => setInputData({ ...inputData,\n        selectedFile: base64\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"submit\",\n      className: \"btn btn-success mt-2\",\n      children: \"Share\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn btn-danger mb-2 mt-2\",\n      onClick: clearText,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormElements, \"g6xlMBAAG5EQgiHFdGVIVafUvPo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = FormElements;\nexport default FormElements;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormElements\");","map":{"version":3,"sources":["/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/components/Form/forms.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Form","Label","FormText","FormGroup","Input","Button","FileBase","createNewPost","updateNewPost","FormElements","currentId","setCurrentId","selector","state","posts","find","p","_id","inputData","setInputData","title","message","tags","selectedFile","dispatch","user","JSON","parse","localStorage","getItem","handleSubmit","e","preventDefault","name","result","clearText","target","value","split","base64"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Form, Label, FormText, FormGroup, Input,  Button} from \"reactstrap\"\nimport FileBase from \"react-file-base64\"\nimport {createNewPost, updateNewPost} from '../../REDUX/action/action'\nimport \"./form.css\"\n\nconst FormElements = ({currentId, setCurrentId}) =>  {\n        // UseState Hook that defines our  database collection and take its value also control\n      const selector = useSelector(state => currentId ? state.posts.find(p => p._id ===currentId) : null)\n      const [inputData, setInputData] = useState({title:'', message:'', tags:'', selectedFile:''})\n      const dispatch = useDispatch()\n      const user = JSON.parse(localStorage.getItem(\"profile\"))\n// HandleSubmit will send data received from form elements to backEnd\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if(currentId===0){\n          dispatch(createNewPost({...inputData, name: user?.result?.name}))\n        }else{\n          dispatch(updateNewPost(currentId,inputData))\n        }\n        clearText() //After clicking the any button, it will clear input value\n    }\n    //Here we will make work selector another name is single post we take and check the similarity of id of single post\n    useEffect(()=> {\n        if(selector){\n          setInputData(selector)\n        }\n    }, [selector])\n\n//Clearing the text when we cancel\nconst clearText = () => {\n  setCurrentId(null)\n  setInputData({ \n  title:'',\n  message:'',\n  tags:'', \n  selectedFile:''})}\n  \n    //Creating form elements and adding select file function by FileBase\n    // Controlling its value and submit all data for sending to the database\n    return (\n        <Form className=\"main-form d-flex\" onSubmit={handleSubmit}>\n        <FormGroup className=\"header-text bg bg-dark p-2 mb-3\">\n        <FormText color=\"light\" >\n         {currentId ? \"Edit your impression\": \"Create your short impression\"}\n        </FormText>\n      </FormGroup>\n      <FormGroup className=\"mb-2\">\n        <Label className=\"mb-2\" for=\"title\">Title</Label>\n        <Input\n         required\n         autoComplete=\"off\"\n         type=\"text\"\n         name=\"title\" \n         id=\"title\"\n         placeholder=\"title...\"\n         value={inputData.title}\n         onChange={(e)=>setInputData({...inputData, title: e.target.value})}/>\n      </FormGroup>\n      <FormGroup className=\"mb-2\">\n        <Label className=\"mb-2\" for=\"title\">Tags</Label>\n        <Input \n         required\n         type=\"text\" \n         name=\"tags\"\n         id=\"tags\" \n         placeholder=\"to your friends\"\n         value={inputData.tags}\n         onChange={(e)=>setInputData({...inputData, tags: e.target.value.split(',')})} />\n      </FormGroup>\n      <FormGroup className=\"mb-2\">\n        <Label className=\"mb-2\" for=\"message\">Your impression</Label>\n        <Input \n         type=\"textarea\"\n         name=\"text\" \n         id=\"text\" \n         placeholder=\"share your impression...\" \n         className=\"text-area\"\n         cols=\"30\" rows=\"5\"\n         value={inputData.message}\n         onChange={(e)=>setInputData({...inputData, message: e.target.value})} />\n      </FormGroup>\n      <FileBase\n        className=\"selected-file\"\n        type=\"file\"\n        multiple={false}\n        onDone ={({base64}) => setInputData({...inputData, selectedFile: base64})}/> \n      <Button type=\"submit\" className=\"btn btn-success mt-2\">Share</Button>\n      <Button className=\"btn btn-danger mb-2 mt-2\" onClick={clearText}>Cancel</Button>\n    </Form>\n    )\n}\nexport default FormElements\n"]},"metadata":{},"sourceType":"module"}