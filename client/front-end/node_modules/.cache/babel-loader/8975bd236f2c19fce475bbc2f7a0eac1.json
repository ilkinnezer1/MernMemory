{"ast":null,"code":"var _jsxFileName = \"/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/components/Nav Panel/Navbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./Nav-panel.css\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from 'react-redux';\nimport decode from \"jwt-decode\";\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Avatar from 'react-avatar';\nimport { Button } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Navbar = () => {\n  _s();\n\n  var _mockUser$result, _mockUser$result2, _mockUser$result3, _mockUser$result4;\n\n  const [mockUser, setMockUser] = useState(JSON.parse(localStorage.getItem(\"profile\")));\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleLogOut = () => {\n    dispatch({\n      type: \"LOGOUT\"\n    });\n    history.push('/auth');\n    setMockUser(null);\n  };\n\n  useEffect(() => {\n    const token = mockUser === null || mockUser === void 0 ? void 0 : mockUser.token;\n\n    if (token) {\n      const decodedToken = decode(token);\n      if (decodedToken.exp * 1000 < new Date().getTime()) handleLogOut();\n    }\n\n    setMockUser(JSON.parse(localStorage.getItem(\"profile\")));\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar navbar-light bg-dark\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      className: \"navbar-brand\",\n      to: \"/\",\n      children: \"Bootstrap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: (mockUser === null || mockUser === void 0 ? void 0 : mockUser.result) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: (_mockUser$result = mockUser.result) === null || _mockUser$result === void 0 ? void 0 : _mockUser$result.imageUrl,\n          className: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n          color: Avatar.getRandomColor('sitebase', ['red', 'green', 'blue', 'yellow', 'gray', 'white']),\n          name: (_mockUser$result2 = mockUser.result) === null || _mockUser$result2 === void 0 ? void 0 : _mockUser$result2.name,\n          round: true,\n          size: \"40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"white\"\n          },\n          children: (_mockUser$result3 = mockUser.result) === null || _mockUser$result3 === void 0 ? void 0 : _mockUser$result3.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-name\",\n          children: (_mockUser$result4 = mockUser.result) === null || _mockUser$result4 === void 0 ? void 0 : _mockUser$result4.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"danger\",\n          onClick: handleLogOut,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/auth\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"success\",\n          children: \"Sign in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Navbar, \"0ioJLwzFUthVQlq0ttcbnvqOyKM=\", false, function () {\n  return [useDispatch, useHistory, useLocation];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/components/Nav Panel/Navbar.js"],"names":["React","useEffect","useState","Link","useDispatch","decode","useHistory","useLocation","Avatar","Button","Navbar","mockUser","setMockUser","JSON","parse","localStorage","getItem","dispatch","history","location","handleLogOut","type","push","token","decodedToken","exp","Date","getTime","result","imageUrl","getRandomColor","name","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAO,iBAAP;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAAQC,MAAR,QAAqB,YAArB;;;AAGA,MAAMC,MAAM,GAAG,MAAO;AAAA;;AAAA;;AAEtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACW,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAD,CAAxC;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,OAAO,GAAGZ,UAAU,EAA1B;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;;AAEO,QAAMa,YAAY,GAAG,MAAM;AACxBH,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAR;AACEH,IAAAA,OAAO,CAACI,IAAR,CAAa,OAAb;AACGV,IAAAA,WAAW,CAAC,IAAD,CAAX;AACF,GAJN;;AAKKX,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMsB,KAAK,GAAGZ,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAEY,KAAxB;;AACA,QAAGA,KAAH,EAAS;AACL,YAAMC,YAAY,GAAGnB,MAAM,CAACkB,KAAD,CAA3B;AACA,UAAGC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0B,IAAIC,IAAJ,GAAWC,OAAX,EAA7B,EAAmDP,YAAY;AAClE;;AACDR,IAAAA,WAAW,CAACC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAD,CAAX;AACH,GAPQ,EAON,CAACG,QAAD,CAPM,CAAT;AAWR,sBACI;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,cAAhB;AAA+B,MAAA,EAAE,EAAC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAII;AAAA,gBACK,CAAAR,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEiB,MAAV,iBACG;AAAA,gCACI;AAAK,UAAA,GAAG,sBAAEjB,QAAQ,CAACiB,MAAX,qDAAE,iBAAiBC,QAA3B;AAAqC,UAAA,SAAS,EAAC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAErB,MAAM,CAACsB,cAAP,CAAsB,UAAtB,EAAkC,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,QAAzB,EAAmC,MAAnC,EAA2C,OAA3C,CAAlC,CAAf;AAAuG,UAAA,IAAI,uBAAEnB,QAAQ,CAACiB,MAAX,sDAAE,kBAAiBG,IAA9H;AAAoI,UAAA,KAAK,MAAzI;AAA0I,UAAA,IAAI,EAAC;AAA/I;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGQ;AAAM,UAAA,KAAK,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAb;AAAA,yCAAgCrB,QAAQ,CAACiB,MAAzC,sDAAgC,kBAAiBG;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAHR,eAII;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,yCAA4BpB,QAAQ,CAACiB,MAArC,sDAA4B,kBAAiBG;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,QAAd;AAAuB,UAAA,OAAO,EAAEX,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,gBASG,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,OAAT;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAVR;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CA9CD;;GAAMV,M;UAGWN,W,EACDE,U,EACCC,W;;;KALXG,M;AAgDN,eAAeA,MAAf","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport \"./Nav-panel.css\" \nimport {Link} from \"react-router-dom\"\nimport { useDispatch } from 'react-redux'\nimport decode from \"jwt-decode\"\nimport { useHistory, useLocation } from 'react-router-dom'\nimport Avatar from 'react-avatar'\nimport {Button} from \"reactstrap\"\n\n\nconst Navbar = () =>  {\n\nconst [mockUser, setMockUser] = useState(JSON.parse(localStorage.getItem(\"profile\")))\nconst dispatch = useDispatch()\nconst history = useHistory()\nconst location = useLocation()\n\n       const handleLogOut = () => {\n          dispatch({type:\"LOGOUT\"})\n            history.push('/auth')\n               setMockUser(null)\n            }\n            useEffect(()=> {\n                const token = mockUser?.token\n                if(token){\n                    const decodedToken = decode(token)\n                    if(decodedToken.exp * 1000 < new Date().getTime()) handleLogOut()\n                }\n                setMockUser(JSON.parse(localStorage.getItem(\"profile\")))\n            }, [location])\n\n         \n\n    return (\n        <nav className=\"navbar navbar-light bg-dark\">\n          <Link className=\"navbar-brand\" to=\"/\">\n            Bootstrap\n          </Link>\n            <div>\n                {mockUser?.result ? (\n                    <div>\n                        <img src={mockUser.result?.imageUrl} className=\"avatar\"/>\n                        <Avatar color={Avatar.getRandomColor('sitebase', ['red', 'green', 'blue', 'yellow', 'gray', 'white'])} name={mockUser.result?.name} round size=\"40\" />\n                            <span style={{color: \"white\"}}>{mockUser.result?.name}</span>\n                        <div className=\"user-name\">{mockUser.result?.name}</div>\n                        <Button color=\"danger\" onClick={handleLogOut}>Logout</Button>\n                    </div>\n                ) : (\n                    <Link to=\"/auth\">\n                      <Button color=\"success\">Sign in</Button>\n                    </Link>\n                  \n                )}\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar\n"]},"metadata":{},"sourceType":"module"}