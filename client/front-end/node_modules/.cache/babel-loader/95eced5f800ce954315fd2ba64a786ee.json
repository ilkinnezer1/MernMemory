{"ast":null,"code":"//IDENTIFIES WHERE DATA STORES\nconst initialValue = {\n  posts: []\n};\nexport default function posts(state = initialValue, action) {\n  switch (action.type) {\n    case \"SEARCH_ALL\":\n      return { ...state,\n        posts: action.payload\n      };\n\n    case \"LIKE_POST\":\n      return state.map(post => post._id === action.payload._id ? action.payload : post);\n    // that will send data to state posts\n\n    case \"DELETE\":\n      return state.filter(post => post._id !== action.payload);\n    // Checking the identity of id of single posts and attach to update posts\n\n    case \"UPDATE_POST\":\n      return state.map(post => post._id === action.payload._id ? action.payload : post);\n    //Checking the similarity of posts's id coming from backend \n\n    case \"FETCH_ALL\":\n      return { ...state,\n        posts: action.payload.data,\n        onPage: action.payload.onPage,\n        totalNumbers: action.payload.totalNumbers\n      };\n    //takes data and sends to store\n\n    case \"CREATE_POST\":\n      return [...state, action.payload];\n    //spreads data and take the specific data coming from backend\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/yusifnezerov/Desktop/MERN memory/client/front-end/src/REDUX/reducers/reducers.js"],"names":["initialValue","posts","state","action","type","payload","map","post","_id","filter","data","onPage","totalNumbers"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,eAAe,SAASA,KAAT,CAAgBC,KAAK,GAACF,YAAtB,EAAoCG,MAApC,EAA2C;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,YAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWD,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAAzB,OAAP;;AACJ,SAAK,WAAL;AACA,aAAOH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAvE,CAAP;AAAoF;;AACpF,SAAK,QAAL;AACI,aAAOL,KAAK,CAACO,MAAN,CAAaF,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAzC,CAAP;AAAyD;;AAC7D,SAAK,aAAL;AACI,aAAOH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAASA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAtE,CAAP;AAAmF;;AACvF,SAAK,WAAL;AACF,aAAO,EACH,GAAGL,KADA;AAEHD,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAAP,CAAeK,IAFnB;AAGHC,QAAAA,MAAM,EAAER,MAAM,CAACE,OAAP,CAAeM,MAHpB;AAIHC,QAAAA,YAAY,EAAET,MAAM,CAACE,OAAP,CAAeO;AAJ1B,OAAP;AAKG;;AACD,SAAK,aAAL;AACI,aAAO,CAAC,GAAGV,KAAJ,EAAYC,MAAM,CAACE,OAAnB,CAAP;AAAoC;;AACxC;AAAS,aAAOH,KAAP;AAlBb;AAoBH","sourcesContent":["//IDENTIFIES WHERE DATA STORES\nconst initialValue = {\n    posts: []\n}\n\nexport default function posts (state=initialValue, action){\n    switch (action.type){\n        case \"SEARCH_ALL\":\n            return {...state, posts: action.payload}\n        case \"LIKE_POST\": \n        return state.map((post) => post._id === action.payload._id ? action.payload : post )// that will send data to state posts\n        case \"DELETE\" :\n            return state.filter(post => post._id !== action.payload) // Checking the identity of id of single posts and attach to update posts\n        case \"UPDATE_POST\" :\n            return state.map((post)=> post._id === action.payload._id ? action.payload : post) //Checking the similarity of posts's id coming from backend \n        case \"FETCH_ALL\": \n      return {\n          ...state,\n          posts: action.payload.data,\n          onPage: action.payload.onPage,\n          totalNumbers: action.payload.totalNumbers\n      }; //takes data and sends to store\n        case \"CREATE_POST\" :\n            return [...state,  action.payload]; //spreads data and take the specific data coming from backend\n        default: return state\n    }\n}\n"]},"metadata":{},"sourceType":"module"}